###_______________  LH STINGER PICO MMU  _____________________
### Do not edit or include this file into printer.cfg




### ------ BOOT INIT ------


[delayed_gcode _SP_BOOT]
initial_duration: 3
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% if sp.enabled == 1 %}
    RESPOND MSG=""
    RESPOND MSG="---- LH Stinger Pico MMU Enabled ----"
    RESPOND MSG=""

    {% if printer.save_variables.variables.last_lane != -1 %}
      RESPOND MSG="SP: Loaded Extruder Lane saved: {printer.save_variables.variables.last_lane}"
    {% else %}
      RESPOND MSG="SP: No loaded LANE saved in memory"
    {% endif %}
    
     RESPOND MSG="SP: Initializing LH Stinger Pico MMU"
    SP_INIT
    _CHECK_SETTINGS_VERSION_SP
  {% endif %}



[gcode_macro SP_INIT]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  SET_FILAMENT_SENSOR SENSOR=sp_sensor_runout ENABLE=0
  
  {% if printer['gcode_button sp_sensor'].state == 'PRESSED' %}
    RESPOND MSG="SP: Inserted filament detected"
    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=1

    {% if printer.save_variables.variables.last_lane == -1  %}
      RESPOND MSG="SP: WARNING! Unknown LANE loaded! Please verify your system and use SP_FORCE_SET_LANE LANE=<0...> to manually set the loaded lane"
      RESPOND MSG="SP: WARNING! Defaulting to LANE 0! Please correct if not accurate!"
      SAVE_VARIABLE VARIABLE=last_lane VALUE=0
    {% else %}
    RESPOND MSG="SP: Loaded LANE {printer.save_variables.variables.last_lane} "  
    {% endif %}

  {% else %}
      {% if printer.save_variables.variables.last_lane != -1  %}
        RESPOND MSG="SP: WARNING! Last set LANE was {printer.save_variables.variables.last_lane}, but no filament is detected! Resetting lane memory"
      {% endif %}

      SAVE_VARIABLE VARIABLE=last_lane VALUE=-1
      SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=0
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=0
      RESPOND MSG="SP: Filament not present in the hotend"             
  {% endif %}

  SP_HOME
  SP_CLEAR_ERROR_CODES 
  _SP_RESET_VARIABLES




### the macro below is broken into A B parts to obtain refreshed variables for error checking
[gcode_macro _SP_PRINT_START]
gcode:
  {% set lane = params.LANE| default(-1) | int %}
  {% set temp = params.TEMP| default(-1) | int %}
  {% set unload_lane = printer.save_variables.variables.last_lane | default(-1) | int %}
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  CLEAR_PAUSE
   
  {% if sp.enabled == 1  %}
    RESPOND MSG="SP: Print Start - Resetting the SP MMU"    
    SP_INIT
  
    {% if lane+1 <= sp.lanes and lane >= 0 %}
   
      {% if lane != unload_lane %}        
        RESPOND MSG=""
        RESPOND MSG="SP: ----- Filament Change: LANE {unload_lane} >>>> LANE {lane} ----- "
 
        ### Filament Change Routine
        _SP_SET_CODE CODE=1       
        _SP_FILAMENT_CHANGE UNLOAD_LANE={unload_lane} LOAD_LANE={lane} TEMP={temp} PURGE=1 
        
     
        _SP_REFRESH_STATE
        _SP_PRINT_START_B
        
       {% else %}
          RESPOND MSG="SP: No filament change required"             
          RESPOND MSG="SP: Starting print with LANE {lane}"
          SP_CLEAR_ERROR_CODES
       {% endif %}
       
     {% else %}
       RESPOND TYPE=error MSG="SP: ERROR: Invalid LANE inputs. LANE {unload_lane} and loading LANE {lane}"
       _SP_SET_CODE CODE=1
     {% endif %}
     
  {% else %}
    RESPOND MSG="The SP MMU is not enabled for this print"
  {% endif %}



[gcode_macro _SP_PRINT_START_B]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  
  {% if sp.enabled == 1 %}
    {% if rt.exit_code == 0 %}
      RESPOND MSG="SP: Continuing. Please wait"
    {% else %}
      RESPOND TYPE=error MSG="SP: Turning off hotend and PAUSING"
      M104 S0 # Turn off hotend for safety
      SP_HOME
      PAUSE
    {% endif %}  
  {% endif %} 



[gcode_macro _SP_PRINT_END]
gcode:
  RESPOND MSG=""
  RESPOND MSG="SP: ---- Print Ended ----"
  RESPOND MSG="SP: Resetting LH Stinger Pico MMU "
  _SP_SHOW_STATISTICS
  SP_INIT


  
##### TOOL CHANGES


[gcode_macro T0]
gcode:
  _SP_TOOL_CHANGE LANE=0

[gcode_macro T1]
gcode:
  _SP_TOOL_CHANGE LANE=1

[gcode_macro T2]
gcode:
  _SP_TOOL_CHANGE LANE=2

[gcode_macro T3]
gcode:
  _SP_TOOL_CHANGE LANE=3

[gcode_macro T4]
gcode:
  _SP_TOOL_CHANGE LANE=4

[gcode_macro T5]
gcode:
  _SP_TOOL_CHANGE LANE=5

[gcode_macro T6]
gcode:
  _SP_TOOL_CHANGE LANE=6



[gcode_macro _SP_TOOL_CHANGE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  
  {% if sp.enabled == 1 %}
    {% if params.LANE %}
      {% set lane = params.LANE | int %}
      {% set unload_lane = printer.save_variables.variables.last_lane | default(-1) | int %}
  
      {% if lane != unload_lane %}          
        {% if rt.active != 1  %} 
          RESPOND MSG="SP: MMU not active yet. Initializing the SP MMU"
          SP_INIT
        {% endif %}     

        # Main pause that starts the change
        _SP_PAUSE LANE={lane}  
     
      {% else %}
        RESPOND MSG="SP: LANE {lane} already loaded. No change required"
      {% endif %} 

    {% else %}
      RESPOND TYPE=error MSG="SP: LANE parameter missing"
    {% endif %}
    
  {% endif %}




##### MANUAL COMMANDS


[gcode_macro SP_FORCE_SET_LOADED_LANE]
gcode:
  {% if params.LANE %}
    SAVE_VARIABLE VARIABLE=last_lane VALUE={params.LANE | int}
  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...> or LANE=-1 for no loaded lane"
  {% endif %}

  

[gcode_macro SP_FORCE_SET_HOTEND_LOADED]
gcode:
  {% if params.VALUE %}
    SAVE_VARIABLE VARIABLE=hotend_loaded VALUE={params.VALUE | int}
  {% else %}
    RESPOND TYPE=error MSG="SP: VALUE. Run again with VALUE=<0/1>"
  {% endif %}



[gcode_macro SP_FORCE_MOVE_LANE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set dist = params.DIST|default(-40) | int %}
  
  {% if rt.selected_lane >= 0 and not params.LANE %}
     RESPOND MSG="SP: Moving previously selected lane. LANE: {rt.selected_lane} "
     _SP_LANE_SELECT LANE={rt.selected_lane}
     _SP_MOTOR {rawparams} STOP=0 DIST={dist}
  
  {% else %}
    {% if params.LANE %}
    _SP_LANE_SELECT LANE={params.LANE | int}
    _SP_MOTOR {rawparams} STOP=0 DIST={dist}
  
    {% else %}
      RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...> "
    {% endif %}
  
  {% endif %}
  


[gcode_macro SP_SET_ANGLE_OFFSET]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  SET_GCODE_VARIABLE MACRO=_SP_VARS VARIABLE=angle_offset VALUE={params.VALUE|float}
  _SP_SERVO ANGLE={rt.commanded_angle}



[gcode_macro SP_LOAD_EXTRUDER]
gcode:
  {% set tmp = params.LANE %}
  SP_CLEAR_ERROR_CODES
  _SP_LOAD_EXTRUDER {rawparams}
  SP_HOME



[gcode_macro SP_UNLOAD_EXTRUDER]
gcode:
  {% set tmp = params.LANE %}
  SP_CLEAR_ERROR_CODES
  _SP_UNLOAD_EXTRUDER {rawparams}
  SP_HOME



[gcode_macro SP_LOAD_HOTEND]
gcode:
  {% set tmp = params.TEMP %}
  SP_CLEAR_ERROR_CODES
  _SP_LOAD_HOTEND {rawparams} FORCE=1
  SP_HOME



[gcode_macro SP_UNLOAD_HOTEND]
gcode:
  {% set tmp = params.TEMP %}
  SP_CLEAR_ERROR_CODES
  _SP_UNLOAD_HOTEND {rawparams} FORCE=1



[gcode_macro SP_LOAD_LANE]
gcode:
  {% if params.LANE%}
    
    SP_CLEAR_ERROR_CODES
    _SP_LOAD_LANE LANE={params.LANE} FORCE=1
    

  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
  {% endif %}



[gcode_macro SP_UNLOAD_LANE]
gcode:
  {% if params.LANE%}
    
    SP_CLEAR_ERROR_CODES
    _SP_UNLOAD_LANE LANE={params.LANE} FORCE=1
    SP_HOME

  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
  {% endif %}



[gcode_macro SP_FILAMENT_CHANGE]
gcode:
  {% set unload_lane = params.UNLOAD_LANE %}
  {% set load_lane = params.LOAD_LANE %}
  
  {% if params.UNLOAD_LANE and params.LOAD_LANE %}
    _SP_FILAMENT_CHANGE {rawparams} PURGE=1       
    
  {% else %}
    RESPOND TYPE=error MSG="SP: UNLOAD_LANE and LOAD_LANE parameters missing. Run again with UNLOAD_LANE=<0...> LOAD_LANE=<0...>"
  {% endif %}



[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
    
    RESPOND MSG="SP: Resuming Print"
    RESUME_BASE
    
    {% if rt.sp_pause == 1 %} 
      _SP_RESUME
    {% endif %}
    
    CLEAR_PAUSE




#### LOADING UNLOADING HUB


[gcode_macro SP_LOAD_HUB]
gcode:
  _SP_SET_CODE CODE=1
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% if params.LANE %}
  RESPOND TYPE=command MSG="SP: Loading LANE {params.LANE} into the HUB ..."
    {% if rt.is_filament_in != 1 %}
      RESPOND TYPE=command MSG="SP: Please wait for end message. This might take a bit after the full movement finishes..."
      _SP_LANE_SELECT LANE={params.LANE | int}
      _SP_MOTOR STOP=1 SYNC=1 DIST={sp.dist_mmu_to_hub+rt.overshoot_distance+sp.dist_hub_to_sensor} SPEED={sp.speed_mmu_to_hub}
      RESPOND MSG="SP: LANE {params.LANE} feed has reached the HUB sensor. Parking the filament into the HUB"
      _SP_MOTOR STOP=0 DIST=-{sp.dist_hub_to_sensor}
      SP_CLEAR_ERROR_CODES

     {% else %}
       _SP_LANE_SELECT LANE={params.LANE | int}
       _SP_MOTOR STOP=0 DIST={sp.dist_mmu_to_hub}
       RESPOND MSG="SP: LANE {params.LANE} loaded for specified distance"
       _SP_SET_CODE CODE=10
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
  {% endif %}



[gcode_macro SP_UNLOAD_HUB]
gcode:
  {% set force = params.FORCE | default(0) | int %}
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  _SP_SET_CODE CODE=1
  
  {% if params.LANE %}
    RESPOND TYPE=command MSG="SP: Unloading LANE {params.LANE} from the HUB ..."
    {% if rt.is_filament_in != 1 or params.LANE | int != printer.save_variables.variables.last_lane or printer.save_variables.variables.last_lane == -1 or force == 1 %}
      _SP_LANE_SELECT LANE={params.LANE | int}
      _SP_MOTOR STOP=0 DIST=-{sp.dist_mmu_to_hub} SPEED={sp.speed_mmu_to_hub}
      SP_CLEAR_ERROR_CODES
      SP_HOME
     {% else %}
        RESPOND MSG="SP: LANE {params.LANE} loaded in the extruder. Please Unload lane first"
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
  {% endif %}




#### LOADING UNLOADING LANES

### Main point of contact for filament changes during print time
[gcode_macro _SP_FILAMENT_CHANGE]
gcode:
  {% set purge = params.PURGE|default(0) | int %}
  {% if params.UNLOAD_LANE and params.LOAD_LANE %}
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    
    SP_CLEAR_ERROR_CODES

    
    {% if printer.save_variables.variables.last_lane >=0 %}  
      _SP_REFRESH_STATE
      _SP_UNLOAD_LANE LANE={params.UNLOAD_LANE | int} PURGE={purge}
    {% endif %}
    
    _SP_REFRESH_STATE
    _SP_LOAD_LANE LANE={params.LOAD_LANE | int} 
     
    SP_HOME

    {% if purge == 1 and sp.print_start_change_purge > 0 %}
      M83
      G1 E{sp.print_start_change_purge} F{60*15}
    {% endif %}

    
  {% else %}
    RESPOND TYPE=error MSG="SP: UNLOAD_LANE and LOAD_LANE parameters missing. Run again with UNLOAD_LANE=<0...> LOAD_LANE=<0...>"
    _SP_SET_CODE CODE=1
  {% endif %}



[gcode_macro _SP_LOAD_LANE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set temp = params.TEMP | default(0) | int %}
  {% set force = params.FORCE | default(0) | int %}
  
  {% if rt.exit_code == 0 %}

    {% if params.LANE%}
      RESPOND TYPE=command MSG="SP: Loading LANE {params.LANE} ..."
      
      _SP_REFRESH_STATE
      _SP_LOAD_EXTRUDER LANE={params.LANE | int} 

      M400
        
      _SP_REFRESH_STATE
      _SP_LOAD_HOTEND TEMP={TEMP} FORCE={force}

      M400
      
  
    {% else %}
      RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
      _SP_SET_CODE CODE=1
    {% endif %}

 {% else %}
   _SP_SET_CODE CODE=1
 {% endif %}



[gcode_macro _SP_UNLOAD_LANE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set temp = params.TEMP | default(0) | int %}
  {% set force = params.FORCE | default(0) | int %}
  {% set purge = params.PURGE|default(0) | int %}
 
  {% if rt.exit_code == 0 %}

    {% if params.LANE%}
      RESPOND TYPE=command MSG="SP: Unloading LANE {params.LANE} ..."
      
      _SP_REFRESH_STATE
      _SP_UNLOAD_HOTEND TEMP={temp} FORCE={force} PURGE={purge}

      M400
  
      _SP_REFRESH_STATE
      _SP_UNLOAD_EXTRUDER LANE={params.LANE | int}

      M400
  
     {% else %}
        RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
        _SP_SET_CODE CODE=1
     {% endif %}

 {% else %}
   _SP_SET_CODE CODE=1
 {% endif %}




#### LOADING UNLOADING EXTRUDER


### the macro below is broken into A B C parts to obtain refreshed variables from the sensor
[gcode_macro _SP_LOAD_EXTRUDER]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  
  RESPOND TYPE=command MSG="SP: Loading Extruder ..."
  {% if rt.exit_code == 0 %}
     _SP_SET_CODE CODE=1

    {% if params.LANE %}
      {% if rt.is_filament_in != 1 %}
  
        _SP_LANE_SELECT LANE={params.LANE | int}
        _SP_MOTOR STOP=2 SPEED={sp.speed_hub_to_extruder} DIST={sp.dist_hub_to_sensor*sp.overshoot_factor}
        SP_CLEAR_ERROR_CODES
        _SP_REFRESH_STATE
        _SP_LOAD_EXTRUDER_B LANE={params.LANE}
  
      {% else %}
        RESPOND TYPE=error MSG="SP: Sensor detecting filament in. Please clear the HUB first"
        SP_HOME
      {% endif %}
      
    {% else %}
      RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
    {% endif %}
 {% else %}
   _SP_SET_CODE CODE=1
 {% endif %}
 


[gcode_macro _SP_LOAD_EXTRUDER_B]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  {% if params.LANE %}
    {% if rt.is_filament_in == 1 %}

      RESPOND MSG="SP: First HUB stage loaded. Continuing with Extruder stage..."
      _SP_REFRESH_STATE
      _SP_LOAD_EXTRUDER_C LANE={params.LANE}

    {% else %}
      RESPOND MSG="SP: Sensor not reached. Retrying..."
      _SP_MOTOR STOP=2 SPEED={sp.speed_hub_to_extruder*0.8} DIST={sp.dist_hub_to_sensor*0.5*sp.overshoot_factor}
      _SP_REFRESH_STATE
      _SP_LOAD_EXTRUDER_C LANE={params.LANE}
    {% endif %}
  {% endif %}

 

[gcode_macro _SP_LOAD_EXTRUDER_C]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set park_distance = sp.dist_filament_park %}   # seen from the hotzone side
  
  {% if rt.exit_code == 0 %}
       _SP_SET_CODE CODE=1
     
      {% if rt.is_filament_in == 1 %}
        _SP_LANE_SELECT LANE={rt.selected_lane}

        # Approach from sensor to extruder
        _SP_MOTOR STOP=0 DIST={sp.dist_sensor_to_extruder*0.5} SPEED={sp.speed_hub_to_extruder}

        # Sync move for loading the extruder gears
        M400
        {% set dist = (sp.dist_sensor_to_extruder*0.5) + (park_distance*0.3) %} 
        _SP_MOTOR STOP=0 SYNC=0 SPEED={sp.speed_sync_moves} ACCEL={sp.motor_accel} DIST={dist-4}
        FORCE_MOVE STEPPER=extruder VELOCITY={sp.speed_sync_moves} ACCEL={sp.motor_accel} DISTANCE={dist} 
        SP_HOME
  
        # Park inside extruder
        M400
        FORCE_MOVE STEPPER=extruder VELOCITY={sp.speed_coldzone_loading} DISTANCE={park_distance*0.7}
        
        SAVE_VARIABLE VARIABLE=last_lane VALUE={rt.selected_lane}    ### LANE loaded and saved
        RESPOND MSG="SP: LANE {rt.selected_lane} loaded into the Extruder"
        SP_CLEAR_ERROR_CODES
        
      {% else %}
          RESPOND TYPE=error MSG="SP: Filament hasn't reached the sensor. Please check the printer and try again"
          _SP_MOTOR STOP=0 DIST=-2 # Safety Retract
          SP_HOME
      {% endif %}
          
 {% else %}
   _SP_SET_CODE CODE=1
 {% endif %}



### the macro below is broken into A B C parts to obtain refreshed variables from the sensor for status check
[gcode_macro _SP_UNLOAD_EXTRUDER]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set park_distance = sp.dist_filament_park %} # seen from hotend side
  RESPOND TYPE=command MSG="SP: Unloading Extruder ..."
  
  
  {% if rt.exit_code == 0 %}
     _SP_SET_CODE CODE=1
  
    {% if params.LANE %}
      {% if rt.is_filament_in == 1 %}
        

        # Inside the extruder
        SP_HOME
        M400
        FORCE_MOVE STEPPER=extruder VELOCITY={sp.speed_coldzone_loading} DISTANCE=-{park_distance*0.7} 

        # Sync moves
        _SP_LANE_SELECT LANE={params.LANE | int}

        M400
        {% set sync_dist = (park_distance*0.3 + sp.dist_sensor_to_extruder*0.5) %}
        _SP_MOTOR STOP=0 SYNC=0 SPEED={sp.speed_sync_moves} ACCEL={sp.motor_accel} DIST=-{sync_dist+4}
        FORCE_MOVE STEPPER=extruder VELOCITY={sp.speed_sync_moves} ACCEL={sp.motor_accel} DISTANCE=-{sync_dist} 

        # Outside the extruder 
        _SP_MOTOR STOP=-2 SPEED={sp.speed_hub_to_extruder} DIST=-{sp.dist_sensor_to_extruder*sp.overshoot_factor} # Stop when clearing the sensor

        _SP_REFRESH_STATE
        _SP_UNLOAD_EXTRUDER_B LANE={params.LANE}
        
        
      {% else %}
          RESPOND MSG="SP: Filament is not detected inside the extruder. Unloading not needed"
          SAVE_VARIABLE VARIABLE=last_lane VALUE=-1
          SP_CLEAR_ERROR_CODES
          SP_HOME
      {% endif %}
    {% else %}
      RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
      _SP_SET_CODE CODE=1
    {% endif %}

 {% else %}
   _SP_SET_CODE CODE=1
 {% endif %}



[gcode_macro _SP_UNLOAD_EXTRUDER_B]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set is_filament_in = 1 if printer['gcode_button sp_sensor'].state == 'PRESSED' else 0 %}

  {% if params.LANE %}
    {% if rt.is_filament_in != 1 %}
    
        _SP_REFRESH_STATE
        _SP_UNLOAD_EXTRUDER_C LANE={params.LANE}

    {% else %}
      RESPOND MSG="SP: Sensor not cleared. Retrying..."
        _SP_MOTOR STOP=-2 SPEED={sp.speed_hub_to_extruder*0.8} DIST=-{sp.dist_sensor_to_extruder*0.5*sp.overshoot_factor} # Stop when hitting the sensor
        _SP_REFRESH_STATE
        _SP_UNLOAD_EXTRUDER_C LANE={params.LANE}
    {% endif %}
  {% endif %}



[gcode_macro _SP_UNLOAD_EXTRUDER_C]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set is_filament_in = 1 if printer['gcode_button sp_sensor'].state == 'PRESSED' else 0 %}

  {% if params.LANE %}
    {% if rt.is_filament_in != 1 %}
       
      _SP_MOTOR STOP=0 SPEED={sp.speed_hub_to_extruder} DIST=-{sp.dist_hub_to_sensor}
      RESPOND TYPE=command MSG="SP: Extruder unloaded"
      SAVE_VARIABLE VARIABLE=last_lane VALUE=-1   ### LANE unloaded and saved
      SP_CLEAR_ERROR_CODES

    {% else %}
      RESPOND TYPE=error MSG="SP: Sensor has not beed cleared after retrying to unload. Please check the printer and try again"
      _SP_SET_CODE CODE=1
      SP_HOME
      
    {% endif %}
  {% endif %}




#### LOADING UNLOADING HOTEND


[gcode_macro _SP_LOAD_HOTEND]
gcode: 
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set force = params.FORCE | default(0) | int %}
  {% set hotend_loaded = printer.save_variables.variables.hotend_loaded | default(0) | int %}
  RESPOND TYPE=command MSG="SP: Loading Hotend ..."
  
  {% if rt.exit_code == 0 %} 
    _SP_SET_CODE CODE=1

    {% if rt.is_filament_in == 1 %}   
      {% if hotend_loaded == 0 or force == 1 %}   
      
        {% set extruder_temp = params.TEMP | default(0) | int %}
    
        SP_HOME
        _SP_HEAT_HOTEND TEMP={params.TEMP}
        
        {% set dist = sp.dist_extruder_to_hotzone - sp.dist_filament_park %}
        {% if sp.end_of_load_filament_move < 0 %}  # if a negative end of load move is set, we subtract the distance
          {% set dist = dist - sp.end_of_load_filament_move %}
        {% endif %}
        
        M83
        G0 E{0.5*dist} F{60*sp.speed_hotzone_loading*2} # approach hotzone - A fast stage
        G0 E{0.5*dist} F{60*sp.speed_hotzone_loading} # approach hotzone - B normal stage
      
        {% if sp.end_of_load_filament_move > 0 %}
          G0 E{sp.end_of_load_filament_move} F{60*sp.speed_hotzone_loading}    # push extra distance at load
        {% endif %}
        
        M400
        RESPOND TYPE=command MSG="SP: Hotend loaded"
        SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=1
        SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_changes VALUE={rt.counter_changes+1}
        SP_CLEAR_ERROR_CODES
  
      {% else %}
        RESPOND TYPE=command MSG="SP: Filament already loaded in the hotend. Continuing"
        SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=1
        SP_CLEAR_ERROR_CODES
      {% endif %}

    {% else %}
      RESPOND TYPE=error MSG="SP: Filament is not detected inside the extruder."
      SAVE_VARIABLE VARIABLE=last_lane VALUE=-1
      SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=0
      SP_HOME
    {% endif %}
    
 {% else %}
   _SP_SET_CODE CODE=1
 {% endif %}



[gcode_macro _SP_UNLOAD_HOTEND]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set force = params.FORCE | default(0) | int %}
  {% set purge = params.PURGE|default(0) | int %}
  {% set hotend_loaded = printer.save_variables.variables.hotend_loaded | default(0) | int %}
  
  RESPOND TYPE=command MSG="SP: Unloading Hotend ..." 
  {% if rt.exit_code == 0 %}
    {% if hotend_loaded == 1 or force == 1 %}    
      _SP_SET_CODE CODE=1
      
      {% set extruder_temp = params.TEMP | default(0) | int %}
     
      {% if rt.is_filament_in == 1 or sp.enabled == 0 %}
        _SP_HEAT_HOTEND TEMP={params.TEMP}
        SP_HOME

        _SP_SAVE_PA
        
        {% if purge == 1 %}
          G1 E20 F{60*8}
        {% endif %}
        
        _SP_TIP_FORM    # Forming Tip, takes care of the park distance 
        _SP_RESTORE_PA
        M400
                
        RESPOND TYPE=command MSG="SP: Hotend unloaded"
        SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=0 
        SP_CLEAR_ERROR_CODES

      {% else %}
        RESPOND MSG="SP: Filament already unloaded. Continuing"
        SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=0  
        SP_CLEAR_ERROR_CODES
      {% endif %}
      
    {% else %}
        RESPOND MSG="SP: No filament detected inside the extruder. Skipping ..."
        SP_CLEAR_ERROR_CODES     
        SP_HOME
    {% endif %}

 {% else %}
   _SP_SET_CODE CODE=1
 {% endif %}




#### PAUSE RESUME


# Refactored from Mainsail

[gcode_macro _SP_PAUSE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set lane = params.LANE | default(-1) | int %}
  {% set unload_lane = printer.save_variables.variables.last_lane | default(-1) | int %}
  {% set continue = 0 %}
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder

  # Save Restore Settings
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}            
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %} 
  {% set fan_speed = printer['fan'].speed | default (0.0) %}
  {% set aux_speed = printer['fan_generic aux'].speed if client.has_aux_fan is defined else 0.0 %}  
  {% set velocity = printer['toolhead'].max_velocity %}  
  {% set accel = printer['toolhead'].max_accel %}  
  
  SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=saved VALUE="{{'restore': restore, 'temp': temp, 'fan_speed': fan_speed, 'aux_speed': aux_speed, 'velocity': velocity, 'accel': accel}}"
  SAVE_GCODE_STATE NAME=_SP_FILAMENT_CHANGE

  ### Pausing
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=sp_pause VALUE=1

  ### saving positions
  M400
  {% set sx = printer.toolhead.position.x %}
  {% set sy = printer.toolhead.position.y %}
  {% set sz = printer.toolhead.position.z %}
  SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=pos VALUE="{{'saved_x': sx, 'saved_y': sy, 'saved_z': sz}}"
 _SP_RESET_GCODE_MOTION
  
  # Pause retract
  {% if sp.pause_retract != 0 and can_extrude == True %}
    M83
    G0 E-{sp.pause_retract | abs} F{60*20}   # Retract
  {% endif %}

  # Pause fans
  {% if sp.pause_fan_speed | float >= 0.0 %}
    _SP_FANS SPEED={sp.pause_fan_speed | float}
  {% endif %}

  # Pause park
  {% if sp.use_park == 1 %}
    _SP_PAUSE_PARK
  {% endif %} 

  ### Checks
  {% if lane+1 <= sp.lanes and lane >= 0 %}  # is the next lane valid
      {% if unload_lane >= 0 and unload_lane+1 <= sp.lanes %}     # is the current lane valid
        RESPOND MSG="SP: ----- Filament Change: LANE {printer.save_variables.variables.last_lane} >>>> LANE {lane} ----- "
        {% set continue = 1 %}
      
      {% else %}
        RESPOND TYPE=error MSG="SP: Unknown current loaded LANE {unload_lane}. Use SP_FORCE_SET_LANE LANE=<0...>, SP_CLEAR_ERROR_CODES, SP_UNLOAD_LANE, SP_LOAD_LANE and finally RESUME to manually change the filament. "
      {% endif %}

  {% else %}
    RESPOND TYPE=error MSG="SP: Invalid change to LANE {lane}"
  {% endif %}

 
  # Main filament change routine
  {% if continue == 1 %}

     # check if user macro can be executed
     {% if rt.user_macros_executed == 0 %}
      RESPOND TYPE=command MSG='SP: Running User Pause Macro'
      SAVE_GCODE_STATE NAME=user_macro
      _SP_BEFORE_CHANGE
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=user_macros_executed VALUE=1
      SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=unloading_lane VALUE={unload_lane}
      SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=loading_lane VALUE={lane}
      RESTORE_GCODE_STATE NAME=user_macro
    {% endif %}
    

    
    _SP_FILAMENT_CHANGE UNLOAD_LANE={unload_lane} LOAD_LANE={lane}   # Main change macro
    _SP_RESUME
    
  {% else %}
    RESPOND TYPE=error MSG="SP: Print PAUSED and filament change interrupted due to previous errors. Please fix the issues before resuming"
    RESPOND TYPE=error MSG="SP: Pending unloading LANE {printer.save_variables.variables.last_lane} and loading LANE {lane}"
    
    SP_CLEAR_ERROR_CODES
    PAUSE
  {% endif %}



[gcode_macro _SP_RESUME]
variable_saved: {'restore': False, 'temp': 0, 'fan_speed': 0, 'aux_speed': 0, 'velocity': 200, 'accel': 5000 }
variable_pos: {'saved_x': -1.0, 'saved_y': -1.0, 'saved_z': -1.0 }
variable_loading_lane: -1
variable_unloading_lane: -1
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = sp.park_speed|default(velocity) %}
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
                
  {% set continue = 0 %}
  {% if rt.exit_code == 0 %}

      # Restore Saved Settings
      {% if saved.restore and rt.sp_pause == 1 %}
          RESPOND MSG="SP: Restoring previous settings"

          # Restore temp
          {% if saved.temp != printer['extruder'].target %}
            RESPOND TYPE=echo MSG="SP: Temperature target : {saved.temp}"
            M109 S{saved.temp}
          {% endif %}

          # Restore speeds
          SET_VELOCITY_LIMIT VELOCITY={saved.velocity} ACCEL={saved.accel} 
          
          # Restore fans
          M106 S{saved.fan_speed*255}
          {% if saved.aux_speed > 0 %}
            SET_FAN_SPEED FAN=aux SPEED={saved.aux_speed}
          {% endif %}

          # Setting continue for sp_pause
          {% set continue = 1 %}
          
      {% elif can_extrude %}
        {% set continue = 1 %}     
        # Counting manual pauses
        SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_pauses VALUE={rt.counter_pauses+1}
        
      {% else %} 
        RESPOND TYPE=error MSG="SP: RESUME interrupted. The hotend is not hot enough, please heat up again and then RESUME print"
      {% endif %}

  {% endif %}


  # Main resume routine
  {% if continue != 1 %}
    RESPOND TYPE=error MSG="SP: Cannot RESUME print due to previous errors. Please fix the issues or run SP_CLEAR_ERROR_CODES before trying RESUME "
    RESPOND TYPE=error MSG="SP: PAUSED. Pending LANE {loading_lane}, unloading LANE {unloading_lane}"
    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_errors VALUE={rt.counter_errors+1}
    PAUSE
    
  {% else %}    
    # Check if previous user macro was executed
    {% if rt.user_macros_executed == 1 %}
      RESPOND TYPE=command MSG='SP: Running User Resume Macro'
      SAVE_GCODE_STATE NAME=user_macro
      _SP_AFTER_CHANGE
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=user_macros_executed VALUE=0
      RESTORE_GCODE_STATE NAME=user_macro
    {% endif %}
    
    {% if sp.pause_retract != 0 and can_extrude == True %}
      M83
      G0 E{sp.pause_retract} F{3000}   # Detract
    {% endif %}
    
    RESPOND MSG="SP: ----- Filament Changed: LANE {unloading_lane} >>>> LANE {printer.save_variables.variables.last_lane} ----- "
    RESTORE_GCODE_STATE NAME=_SP_FILAMENT_CHANGE
   
    # Restoring Z position
    _SP_RESET_GCODE_MOTION

    {% if pos.saved_z | float >= 0.1 %}
      G1 Z{pos.saved_z}
      G1 X{pos.saved_x} Y{pos.saved_y} F{60*sp.park_speed*0.5}
      SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=pos VALUE="{{'saved_x': -1.0, 'saved_y': -1.0, 'saved_z': -1.0 }}"
    {% endif %}

  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=sp_pause VALUE=0    
 {% endif %}



[gcode_macro _SP_PAUSE_PARK]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set park_x  = sp.park_x %}
  {% set park_y  = sp.park_y %}
  {% set park_dz = sp.park_dz| abs %}
  {% set velocity = sp.park_speed %}
  {% set accel = sp.park_accel %}

  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}W
                
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
 
             
  ##### moves #####

  {% if "xyz" in printer.toolhead.homed_axes %}
    SET_VELOCITY_LIMIT VELOCITY={velocity} ACCEL={accel} 
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{park_x} Y{park_y} F{60*velocity}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='PARK: Printer not homed'
  {% endif %}

  


#### LOW LEVEL CORE FUNCTIONS


[gcode_macro _SP_HEAT_HOTEND]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  
  {% set extruder_temp = params.TEMP | default(0) | int %}
  {% if extruder_temp == 0 %}
    {% if printer['extruder'].target >= 200 %}
      {% set extruder_temp = printer['extruder'].target | int %}
    {% else %}
      {% set extruder_temp = sp.min_loading_temp | int %}
      RESPOND MSG="SP: Heating up hotend to {sp.min_loading_temp}C"
    {% endif %}
  {% endif %}
  M109 S{extruder_temp}      



[gcode_macro _SP_FANS]
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set speed = params.SPEED | default (0.0) | float %}


  
  {% if speed != 0 %}
    M106 S{speed*255}
    # RESPOND MSG="SETTING FANS TO: {speed*255}"
  {% else %}
    M106 S0
  {% endif %}
  
  {% if client.has_aux_fan %}          # force aux fan off
    {% if client.has_aux_fan == True %}
      SET_FAN_SPEED FAN=aux SPEED=0
    {% endif %}
  {% endif %}



[gcode_macro _SP_SAVE_PA]
gcode:
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    
    {% if printer.extruder.pressure_advance > 0 and sp.turn_pa_off == 1 %}
        SET_GCODE_VARIABLE MACRO=_SP_RESTORE_PA VARIABLE=pa VALUE={printer.extruder.pressure_advance | float}
        SET_PRESSURE_ADVANCE ADVANCE=0
    {% endif %}



[gcode_macro _SP_RESTORE_PA]
variable_pa: -1.0
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}

  {% if printer["gcode_macro _SP_RESTORE_PA"].pa > 0 and sp.turn_pa_off == 1 %}
    SET_PRESSURE_ADVANCE ADVANCE={printer["gcode_macro _SP_RESTORE_PA"].pa}
  {% endif %}



[gcode_macro _SP_SHOW_STATISTICS]
gcode:
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  RESPOND MSG=""
  RESPOND MSG="   Errors           : {rt.counter_errors}"
  RESPOND MSG="   Manual Pauses    : {rt.counter_pauses}"
  RESPOND MSG="   Filament Changes : {rt.counter_changes}"
  RESPOND MSG="_____   SP Statistics  _____" 
  RESPOND MSG=""
  


[gcode_macro _SP_DISABLE_MPC]
gcode:
  MPC_SET HEATER=extruder FILAMENT_DENSITY=1.24 FILAMENT_HEAT_CAPACITY=0  # disabling feed forward heating boost - slicer resets MPC filament parameters on resume


[gcode_macro SP_HOME]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}

  {% if sp.enabled %}
    SET_SERVO SERVO=sp_servo ANGLE={sp.angle_home}
    G4 P{1000*sp.switch_time}
  
    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=commanded_angle VALUE={sp.angle_home}
    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=selected_lane VALUE=-1
    
    _SP_OFF
  {% endif %}



[gcode_macro _SP_OFF]
gcode:
  MANUAL_STEPPER STEPPER=sp_motor ENABLE=0
  SET_SERVO servo=sp_servo WIDTH=0
  # RESPOND MSG="SP: Servo and Motor OFF"


[gcode_macro _SP_RESET_GCODE_MOTION]
gcode:
    G90
    M83
    G92 E0
    M400


[gcode_macro _SP_RESET_VARIABLES]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=pos VALUE="{{'saved_x': -1.0, 'saved_y': -1.0, 'saved_z': -1.0 }}"
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=user_macros_executed VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=sp_pause VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=active VALUE=1
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_pauses VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_changes VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_errors VALUE=0


[gcode_macro _SP_REFRESH_STATE]
gcode:
  {% set filament_in = 1 if printer['gcode_button sp_sensor'].state == 'PRESSED' else 0 %}
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE={filament_in}



[gcode_macro _SP_SET_CODE]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=exit_code VALUE={params.CODE|int}



[gcode_macro SP_CLEAR_ERROR_CODES]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=exit_code VALUE=0



[gcode_macro _CHECK_SETTINGS_VERSION_SP]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% if rt.required_version > sp.version %}
    RESPOND TYPE=error MSG="WARNING: sp_mmu_code.cfg requires an updated sp_mmu.cfg v({rt.required_version}) settings file. Please review the latest configuration changes and update your sp_mmu.cfg."
  {% endif %}



[gcode_macro _SP_LANE_SELECT]
gcode:
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
    {% set lane = params.LANE | int %}

    {% if lane+1 <= sp.lanes and lane >= 0 %}
      {% if lane != rt.selected_lane %}
        RESPOND MSG="SP: Selecting Lane {lane}"
        _SP_SERVO ANGLE={sp.angles[lane]}
        SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=selected_lane VALUE={lane}

      {% endif %}

    {% else %}
      RESPOND MSG="SP: Invalid lane: {lane}"
    {% endif %}



[gcode_macro _SP_SERVO]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=commanded_angle VALUE={params.ANGLE|float}

  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set angle = params.ANGLE|float + sp.angle_offset|float %}
  {% set angle = [angle, printer.configfile.settings['servo sp_servo'].maximum_servo_angle] | min %}

  SET_SERVO SERVO=sp_servo ANGLE={angle}
  G4 P{1000*sp.switch_time}

  # RESPOND MSG="Servo angle: {params.ANGLE | float} with offset: {angle}"    # Debug



[gcode_macro _SP_MOTOR]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  
  {% set speed = params.SPEED| default(sp.motor_speed) | int %}
  {% set accel = params.ACCEL| default(sp.motor_accel) | int %}
  {% set dist = params.DIST| default(0) | float %}
  {% set sync = params.SYNC| default(1) | int %}
  {% set stop = params.STOP| default(2) | int %}
  {% set dir = 1 if dist > 0 else -1 %}

  ### Backlash compensation  
  {% if rt.selected_lane != rt.motor_last_lane and  dir > 0 %} # if lanes changed and the new travel direction is positive - in general a lane is retracted before switching so we are assuming backlash since we don't track the last direction per lane
      {% set dist = dist + sp.backlash %}
    
  {% elif dir != rt.motor_last_direction %}  # if the lane is the same and the direction is opposite, then we apply backlask compensation
      {% if dir > 0 %} 
        {% set dist = dist + sp.backlash %}

      {% else %}
        {% set dist = dist - sp.backlash %}

      {% endif %}
        
  {% endif %}
    
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=motor_last_direction VALUE={dir}
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=motor_last_lane VALUE={rt.selected_lane}

   ### Extrusion multiplier and speed compensation
  {% if rt.selected_lane >= 0 %}
    {% if sp.lane_em[rt.selected_lane] %}
      {% set dist = dist * sp.lane_em[rt.selected_lane] %}
      {% set speed = speed * sp.lane_em[rt.selected_lane] %}
    {% endif %}
  {% endif %}

  
  {% if stop == 0 %}
    MANUAL_STEPPER STEPPER=sp_motor ENABLE=1 SET_POSITION=0 SPEED={speed} ACCEL={accel} MOVE={dist} SYNC={sync}
  {% else %}
    MANUAL_STEPPER STEPPER=sp_motor ENABLE=1 SET_POSITION=0 SPEED={speed} ACCEL={accel} MOVE={dist} SYNC={sync} STOP_ON_ENDSTOP={stop}
  {% endif %}




#### SENSORS EVENTS


[gcode_macro _SP_BUTTON_IN]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=1

[gcode_macro _SP_BUTTON_OUT]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=0

[gcode_macro _SP_SENSOR_IN]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=1

[gcode_macro _SP_SENSOR_OUT]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=0




#### TESTS


## Example: SP_TEST_SERVO ANGLE=50 
[gcode_macro SP_TEST_SERVO]
gcode:
  _SP_SERVO ANGLE={params.ANGLE|float}
  RESPOND MSG="SP: Angle set to: {params.ANGLE|float}"


## Example: SP_TEST_MMU TIMES=2
[gcode_macro SP_TEST_MMU]
gcode:
  RESPOND MSG="SP: Testing MMU movements ..."
  {% set times = params.TIMES| default(2) | int %}
  {% for i in range(times) %}
    _SP_TEST
  {%endfor%}
  SP_HOME


[gcode_macro _SP_TEST]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% for i in range(sp.lanes) %}
      RESPOND MSG="SP: Servo commanded to: {sp.angles[i]}"
      _SP_SERVO ANGLE={sp.angles[i]}
      _SP_MOTOR DIST=30
      _SP_MOTOR DIST=-30
  {% endfor %}


## Example: SP_TEST_LOAD_UNLOAD_EXTRUDER LANE=0
[gcode_macro SP_TEST_LOAD_UNLOAD_EXTRUDER]
gcode:

  {% if params.LANE %}
  RESPOND MSG="SP: Testing loading and unloading LANE {params.LANE} between the HUB and the Extruder ..."
     SP_CLEAR_ERROR_CODES
    _SP_LOAD_EXTRUDER LANE={params.LANE | int}
    _SP_UNLOAD_EXTRUDER LANE={params.LANE | int}
  
  {% else %}
    RESPOND TYPE=error MSG="SP: LANES parameters missing. Run again with LANE=<0...>"
  {% endif %}




#### ------ RUNTIME VARIABLES ----------


[gcode_macro _SP_VARS_RUNTIME]

# Runtime - Do not set
variable_required_version: 0.3      # required settings file version
variable_active: 0                  # mmu initialised
variable_commanded_angle: 0         # keeping track of the commanded servo angle
variable_selected_lane: -1          # -1 parked
variable_is_filament_in: -1         # sensor status
variable_exit_code: 0               # last action exit code | 0 = success,  1 = error, 10 success with warning
variable_motor_last_direction: -1   # tracks last move direction for backlash compensation
variable_motor_last_lane: -1        # tracks last selected lane for backlash compensation
variable_user_macros_executed: 0    # tracks user macros execution
variable_sp_pause: 0                # tracks if sp pause was executed
variable_counter_pauses: 0
variable_counter_changes: 0
variable_counter_errors: 0
variable_overshoot_distance: 15     # mm for hub moves
gcode:



#### ------ PLAYGROUND ----------





